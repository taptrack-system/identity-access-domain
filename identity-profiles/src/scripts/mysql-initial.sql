DROP DATABASE IF EXISTS identity_profiles_db;
DROP USER IF EXISTS `admin`@`%`;
CREATE DATABASE IF NOT EXISTS identity_profiles_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE USER IF NOT EXISTS `admin`@`%` IDENTIFIED WITH mysql_native_password BY 'password';
GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, EXECUTE, CREATE VIEW, SHOW VIEW,
CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER ON `identity_profiles_db`.* TO `admin`@`%`;

-- ==============================================
-- Tabela: ROLE (Perfis de Acesso)
-- ==============================================
CREATE TABLE roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE,
    description VARCHAR(255)
);

-- Populando perfis básicos
INSERT INTO roles (name, description) VALUES
('ADMIN', 'System administrator with full access'),
('CUSTOMER', 'End customer with restricted access'),
('SUPPLIER', 'Supplier user with specific permissions'),
('MANAGER', 'Manager with supervisory permissions');

-- ==============================================
-- Tabela: USERS
-- ==============================================
CREATE TABLE users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    full_name VARCHAR(150) NOT NULL,
    status VARCHAR(20) NOT NULL DEFAULT 'ACTIVE', -- ACTIVE, INACTIVE, BLOCKED
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Índices auxiliares
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_username ON users(username);

-- ==============================================
-- Tabela: USER_ROLES (Relação N:N)
-- ==============================================
CREATE TABLE user_roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL,
    role_id BIGINT NOT NULL,
    assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_role FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE,
    CONSTRAINT uq_user_role UNIQUE (user_id, role_id) -- não permitir duplicado
);

-- ==============================================
-- Tabela: AUDIT_LOG (opcional, rastreabilidade)
-- ==============================================
CREATE TABLE audit_log (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    entity VARCHAR(100) NOT NULL,
    entity_id BIGINT NOT NULL,
    action VARCHAR(20) NOT NULL, -- CREATE, UPDATE, DELETE, LOGIN
    performed_by VARCHAR(100) NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    details CLOB
);

-- Índices para busca rápida
CREATE INDEX idx_audit_entity ON audit_log(entity, entity_id);
CREATE INDEX idx_audit_action ON audit_log(action);

-- Para H2 Database
-- BIGINT GENERATED BY DEFAULT AS IDENTITY é equivalente a AUTO_INCREMENT

-- Para MySQL
-- id BIGINT AUTO_INCREMENT PRIMARY KEY

-- details em audit_log foi definido como CLOB (suporta JSON)

INSERT INTO roles (name, description)
SELECT 'ADMIN', 'System administrator with full access'
WHERE NOT EXISTS (SELECT 1 FROM roles WHERE name = 'ADMIN');

INSERT INTO roles (name, description)
SELECT 'CUSTOMER', 'End customer with restricted access'
WHERE NOT EXISTS (SELECT 1 FROM roles WHERE name = 'CUSTOMER');

INSERT INTO roles (name, description)
SELECT 'SUPPLIER', 'Supplier user with specific permissions'
WHERE NOT EXISTS (SELECT 1 FROM roles WHERE name = 'SUPPLIER');

INSERT INTO roles (name, description)
SELECT 'MANAGER', 'Manager with supervisory permissions'
WHERE NOT EXISTS (SELECT 1 FROM roles WHERE name = 'MANAGER');


